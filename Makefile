.ONESHELL:
.SHELL := $(echo $0)

# Set the default environment if nothing was set
ifeq ($(strip $(TF_ENVIRONMENT)),)
export TF_ENVIRONMENT = staging
endif

cleanup: ## Making a fresh start ;).
	@find . -name '.terraform' -prune -exec rm -rf {} \;

cleanup-lock: ## Cleanup Terraform version lock files
	@find . -name '.terraform.lock*' -prune -exec rm -rf {} \;

cleanup-all: cleanup cleanup-lock ## Cleaning up all local autogenerated Terraform files

pre-commit: ## Running pre-commit hooks.
	@pre-commit run -a

init: cleanup ## Initializing the environment.
	@terraform init \
		-backend-config=env/"$(TF_ENVIRONMENT)"/backend.tfvars

plan: ## Show what terraform thinks it will do.
	@terraform plan \
		-lock=true \
		-input=false \
		-refresh=true \
    -var-file=env/"$(TF_ENVIRONMENT)"/terraform.tfvars

apply: ## Have terraform do the things. This will cost money.
	@terraform apply \
		-lock=true \
		-input=false \
		-refresh=true \
		-var-file=env/"$(TF_ENVIRONMENT)"/terraform.tfvars

refresh: ## Have terraform do the things. This will cost money.
	@terraform refresh \
		-lock=true \
		-input=false \
		-refresh=true \
		-var-file=env/"$(TF_ENVIRONMENT)"/terraform.tfvars

destroy: ## Destroy the things.
	@terraform destroy \
		-lock=true \
		-input=false \
		-refresh=true \
		-var-file=env/"$(TF_ENVIRONMENT)"/terraform.tfvars

list_state: ## List all created resources
	@terraform state list

output: ## Show outputs
	@terraform output

rm_resource: ## Delete a specific resource
	@terraform state rm $(resource)

